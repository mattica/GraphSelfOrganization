#GraphSelfOrganization
#Copyright (C) 2013  Matthew Ira Campbell, John Wendell Hall
#
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#The author may be reached at jackhall@utexas.edu.

#import yaml
#import multiprocessing #will be used to split threads, avoiding the python GIL
import random 
import numpy
#import pygame
#import benpy
import networkx

class Agent(object):
	"""
	Each one of these agents has a unique ID number, an n-D location stored
	in a numpy array, and a choose function. The choose function looks at the
	'big board' of options generated by the ruleset at each step and chooses
	from the options that pertain to it. The choice is applied elsewhere.
	"""
	_currentID = 0
	def __init__(self, location):
		#Make sure that location is a numpy array.
		if type(location) is numpy.ndarray:
			self.location = location
		else:
			self.location = numpy.array(location)
		
		#Generate a unique ID for the new agent.
		self._id = self._currentID 
		Agent._currentID += 1

	@property
	def ID(self):
		"""This way, ID is read-only."""
		return self._id

	def choose(self, options):
		"""Right now, the choice is uniformly random."""
		#Determine which options apply to this agent.
		applicable = [option for option in options if self.ID in option]
		#Return favorite option.
		return random.choice(applicable) #uniform random for now


